#!/usr/bin/env bash
#
# clonepath - clone a path under a directory
#
# Copyright (c) 2019,2023,2025 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#       supporting documentation
#       source copies
#       source works derived from this source
#       binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo (Landon Curt Noll) /\oo/\
#
# http://www.isthe.com/chongo/index.html
# https://github.com/lcn2
#
# Share and enjoy!  :-)


export VERSION="1.0.0 2025-04-07"
NAME=$(basename "$0")
export NAME
USAGE="usage: $0 [-h] [-v] [-V] [-n] [[-o] [-m] [-a] | [-d]] [-k] /path/2/clone /clone/under

    -h      print help message and exit
    -v      be verbose (def: be silent except for errors and warnings)
    -V      print version string and exit

    -n      no op, do nothing (def: do, kill, remove as needed)

    -o      change ownership of dirs from /clone/under thru /clone/under/path/2 (def: do not change)
                NOTE: rsync always sets ownership at and below /clone/under/path/2/clone if superuser

    -m      change permission of dirs from /clone/under thru /clone/under/path/2 (def: do not change)
                NOTE: rsync always sets permissions at and below /clone/under/path/2/clone

    -a      clone using absolute canonical path of /path/2/clone (def: clone /path/2/clone as is)
                NOTE: when combined with -o and/or -a and will change dirs at and below /clone/under

    -d      clone directly into /clone/under (def: clone into /clone/under/path/2/clone)
                NOTE: -d conflicts with -o, -m and -a

    -k      keep files and dirs found in target that are not found in source (def: delete them)
                NOTE: without -k, rsync uses the --delete option

    /path/2/clone   clone /path/2/clone under the /clone/under directory
    /clone/under    top directory under which to clone /path/2/clone

$NAME version: $VERSION"

# setup
#
export V_FLAG=
export N_FLAG=
export O_FLAG=
export M_FLAG=
export A_FLAG=
export D_FLAG=
export K_FLAG=

# parse args
#
while getopts :vnomadkhV flag; do
    case "$flag" in
    v) V_FLAG=true ;;
    n) N_FLAG=true ;;
    o) O_FLAG=true ;;
    m) M_FLAG=true ;;
    a) A_FLAG=true ;;
    d) D_FLAG=true ;;
    k) K_FLAG=true ;;
    h) echo "$USAGE" 1>&2
       exit 2
       ;;
    V) echo "$VERSION" 1>&2
       exit 2
       ;;
    \?) echo "$0: ERROR: invalid option: -$OPTARG" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    :) echo "$0: ERROR: option -$OPTARG requires an argument" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    *) echo "$0: ERROR: unexpected value from getopts: $flag" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    esac
done
shift $(( OPTIND - 1 ));
if [[ $# -ne 2 ]]; then
    echo "$0: ERROR: expected 2 args found: $#" 1>&2
    echo "$USAGE" 1>&2
    exit 3
fi
# verbose arg output
if [[ -n "$V_FLAG" ]]; then
    echo "$0: notice: clonepath version: $VERSION"
    echo "$0: notice: flag set: -v"
    if [[ -n "$N_FLAG" ]]; then
	echo "$0: notice: flag set: -n"
    fi
    if [[ -n "$O_FLAG" ]]; then
	echo "$0: notice: flag set: -o"
    fi
    if [[ -n "$M_FLAG" ]]; then
	echo "$0: notice: flag set: -m"
    fi
    if [[ -n "$A_FLAG" ]]; then
	echo "$0: notice: flag set: -a"
    fi
    if [[ -n "$D_FLAG" ]]; then
	echo "$0: notice: flag set: -d"
    fi
    if [[ -n "$K_FLAG" ]]; then
	echo "$0: notice: flag set: -k"
    fi
fi

# look for important or critical binaries
#
REALPATH=$(type -P realpath)
export REALPATH
if [[ -x "$REALPATH" ]]; then
    echo "$0: ERROR: no realpath executable found" 1>&2
    exit 4
fi
if [[ -n "$V_FLAG" ]]; then
    echo "$0: notice: realpath executable: $REALPATH"
fi
#
PYTHON=$(type -P python)
export PYTHON
if [[ ! -x $PYTHON ]]; then
    echo "$0: ERROR: no python executable found" 1>&2
    exit 4
fi
if [[ -n "$V_FLAG" ]]; then
    echo "$0: notice: python executable: $PYTHON"
fi
#
PWD_BIN=$(type -P pwd)
export PWD_BIN
if [[ ! -x $PWD_BIN ]]; then
    echo "$0: ERROR: no pwd executable found" 1>&2
    exit 4
fi
if [[ -n "$V_FLAG" ]]; then
    echo "$0: notice: pwd executable: $PWD_BIN"
fi
#
DIRNAME=$(type -P dirname)
export DIRNAME
if [[ ! -x $DIRNAME ]]; then
    echo "$0: ERROR: no dirname executable found" 1>&2
    exit 4
fi
if [[ -n "$V_FLAG" ]]; then
    echo "$0: notice: dirname executable: $DIRNAME"
fi
#
RSYNC=$(type -P rsync)
export RSYNC
if [[ ! -x $RSYNC ]]; then
    echo "$0: ERROR: no rsync executable found" 1>&2
    exit 4
fi
if [[ -n "$V_FLAG" ]]; then
    echo "$0: notice: rsync executable: $RSYNC"
fi
#
BASENAME=$(type -P basename)
export BASENAME
if [[ ! -x $BASENAME ]]; then
    echo "$0: ERROR: no basename executable found" 1>&2
    exit 4
fi
if [[ -n "$V_FLAG" ]]; then
    echo "$0: notice: basename executable: $BASENAME"
fi
#
MKDIR=$(type -P mkdir)
export MKDIR
if [[ ! -x $MKDIR ]]; then
    echo "$0: ERROR: no mkdir executable found" 1>&2
    exit 4
fi
if [[ -n "$V_FLAG" ]]; then
    echo "$0: notice: mkdir executable: $MKDIR"
fi
#
STAT=$(type -P stat)
export STAT
if [[ ! -x $STAT ]]; then
    echo "$0: ERROR: no stat executable found" 1>&2
    exit 4
fi
if [[ -n "$V_FLAG" ]]; then
    echo "$0: notice: stat executable: $STAT"
fi
#
CHOWN=$(type -P chown)
export CHOWN
if [[ ! -x $CHOWN ]]; then
    echo "$0: ERROR: no chown executable found" 1>&2
    exit 4
fi
if [[ -n "$V_FLAG" ]]; then
    echo "$0: notice: chown executable: $CHOWN"
fi
#
CHMOD=$(type -P chmod)
export CHMOD
if [[ ! -x $CHMOD ]]; then
    echo "$0: ERROR: no chmod executable found" 1>&2
    exit 4
fi
if [[ -n "$V_FLAG" ]]; then
    echo "$0: notice: chmod executable: $CHMOD"
fi


# firewall
#
# must be root with -o
if [[ -n $O_FLAG && "$(id -u)" -ne 0 ]]; then
    echo "$0: ERROR: must be super-user to use -o" 1>&2
    echo "$USAGE" 1>&2
    exit 3
fi
# -d conflicts with -o, -m and -a
if [[ -n "$D_FLAG" ]]; then
    if [[ -n "$O_FLAG" ]]; then
	echo "$0: ERROR: -d conflicts with -o" 1>&2
	echo "$USAGE" 1>&2
	exit 3
    fi
    if [[ -n "$M_FLAG" ]]; then
	echo "$0: ERROR: -d conflicts with -m" 1>&2
	echo "$USAGE" 1>&2
	exit 3
    fi
    if [[ -n "$A_FLAG" ]]; then
	echo "$0: ERROR: -d conflicts with -a" 1>&2
	echo "$USAGE" 1>&2
	exit 3
    fi
fi
# 1st arg (/path/2/clone) must exist
export INPUT_PATH_ARG="$1"
if [[ ! -e "$INPUT_PATH_ARG" ]]; then
    echo "$0: ERROR: 1st arg (/path/2/clone) does not exist: $INPUT_PATH_ARG" 1>&2
    exit 13
fi
# we will later create 2nd arg (/clone/under)
export TOP_ARG="$2"
if [[ $INPUT_PATH_ARG == "$TOP_ARG" ]]; then
    echo "$0: ERROR: 1st arg (/path/2/clone) == 2nd arg (/clone/under): $TOP_ARG" 1>&2
    exit 14
fi

# determine the canonical absolute path of a file
#
# usage:
#	canonical_abs_path [path]
#
# returns
#	0 all is OK
#	!= 0 on error
#
# stdout
#	absolute path with symlinks resolved, or empty string on error
#
# NOTE: If path is missing or not given, the current working directory is assumed.
#
canonical_abs_path()
{
    # parse args
    #
    if [[ $# -eq 0 ]]; then
	FILENAME="$PWD"
    else
	FILENAME="$1"
    fi

    # attempt to use whatever method we can to find the canonical absolute path
    #
    ANSWER=
    if [[ -n "$REALPATH" ]]; then
	ANSWER=$("$REALPATH" -m -q "$FILENAME" 2>/dev/null)
    elif [[ -n "$PYTHON" ]]; then
	ANSWER=$("$PYTHON" -c 'import os,sys; print os.path.realpath(sys.argv[1])' "$FILENAME" 2>/dev/null)
    elif [[ -n "$PWD_BIN" && -n "$BASENAME" && -n "$DIRNAME" ]]; then
	PATENT_DIR=$("$DIRNAME" "$FILENAME" 2>/dev/null)
	export PATENT_DIR
	if [[ -n "$PATENT_DIR" && -d "$PATENT_DIR" ]]; then
	    # We know the cd will work because we have checked the directory ready
	    #
	    # SC2164 (warning): Use 'cd ... || exit' or 'cd ... || return' in case cd fails.
	    # https://www.shellcheck.net/wiki/SC2164
	    # shellcheck disable=SC2164
	    ANSWER=$(cd "$PATENT_DIR"; "$PWD_BIN" -P 2>/dev/null)'/'$("$BASENAME" "$FILENAME" 2>/dev/null)
	fi
    fi

    # report the answer we may have found
    #
    if [[ -z "$ANSWER" ]]; then
	echo "$0: Warning: no method to determine canonical absolute path: $FILENAME" 1>&2
	return 1
    fi
    echo "$ANSWER"
    return 0
}

# convert 1st arg (/path/2/clone) and verify
#
INPUT_PATH=$(canonical_abs_path "$INPUT_PATH_ARG" 2>/dev/null)
if [[ -z "$INPUT_PATH" ]]; then
    echo "$0: ERROR: canonical_abs_path turned into an empty string, 1st arg (/path/2/clone): $INPUT_PATH_ARG" 1>&2
    exit 15
elif [[ $INPUT_PATH == '/' ]]; then
    echo "$0: ERROR: / is not allowed for 1st arg (/path/2/clone)" 1>&2
    exit 16
elif [[ ! $INPUT_PATH =~ ^'/' ]]; then
    echo "$0: ERROR: canonical_abs_path did not return a /-based path for 1st arg (/path/2/clone): $INPUT_PATH_ARG == $INPUT_PATH" 1>&2
    exit 17
elif [[ -n "$V_FLAG" ]]; then
    if [[ $INPUT_PATH_ARG == "$INPUT_PATH" ]]; then
	echo "$0: notice: absolute 1st arg (/path/2/clone): $INPUT_PATH"
    else
	echo "$0: notice: 1st arg (/path/2/clone): $INPUT_PATH_ARG == $INPUT_PATH"
    fi
fi
if [[ ! -e "$INPUT_PATH" ]]; then
    echo "$0: ERROR: 1st arg (/path/2/clone) does not exist: $INPUT_PATH_ARG = $INPUT_PATH" 1>&2
    exit 18
fi

# verify and if needed setup 2nd arg (/path/2/clone)
#
TOP=$(canonical_abs_path "$TOP_ARG" 2>/dev/null)
if [[ -z "$TOP" ]]; then
    echo "$0: ERROR: canonical_abs_path turned into an empty string, 2nd arg (/clone/under): $TOP_ARG" 1>&2
    exit 19
elif [[ $TOP == '/' ]]; then
    echo "$0: ERROR: / is not allowed for 2nd arg (/clone/under)" 1>&2
    exit 20
elif [[ ! $TOP =~ ^'/' ]]; then
    echo "$0: ERROR: canonical_abs_path did not return a /-based path for 2nd arg (/clone/under): $TOP_ARG == $TOP" 1>&2
    exit 21
elif [[ -n "$V_FLAG" ]]; then
    if [[ $TOP_ARG == "$TOP" ]]; then
	echo "$0: notice: absolute 2nd arg (/clone/under): $TOP_ARG"
    else
	echo "$0: notice: 2nd arg (/clone/under): $TOP_ARG == $TOP"
    fi
fi
if [[ ! -e "$TOP" ]]; then
    if [[ -z "$N_FLAG" ]]; then
	if [[ -n "$V_FLAG" ]]; then
	    echo "$MKDIR" -p -v "$TOP"
	    "$MKDIR" -p -v "$TOP"
	    status="$?"
	else
	    "$MKDIR" -p "$TOP"
	    status="$?"
	fi
	if [[ $status -ne 0 ]]; then
	    echo "$0: ERROR: cannot make 2nd arg (/clone/under) directory: $TOP_ARG = $TOP" 1>&2
	    exit 22
	fi
    elif [[ -n "$V_FLAG" ]]; then
	echo "$MKDIR" -p -v "$TOP"
    fi
elif [[ ! -d "$TOP" ]]; then
    echo "$0: ERROR: 2nd arg (/clone/under) exists but is not a directory: $TOP_ARG = $TOP" 1>&2
    exit 23
fi
if [[ -z "$N_FLAG" && ! -d "$TOP" ]]; then
    echo "$0: ERROR: unable to create 2nd arg (/clone/under) directory: $TOP_ARG = $TOP" 1>&2
    exit 24
fi
if [[ $INPUT_PATH == "$TOP" || $INPUT_PATH -ef "$TOP" ]]; then
    echo "$0: ERROR: 1st arg (/path/2/clone) $INPUT_PATH_ARG = $INPUT_PATH == 2nd arg (/clone/under): $TOP_ARG = $TOP" 1>&2
    exit 25
fi

# avoid infinite recusion, do not let 2nd arg (/clone/under) be a sub-directory of 1st arg (/path/2/clone)
#
if [[ $TOP/ =~ $INPUT_PATH/ ]]; then
    echo "$0: ERROR: cloning $INPUT_PATH under: $TOP would be an infinitely recursive copy" 1>&2
    exit 26
else
    if [[ -n "$V_FLAG" ]]; then
	echo "$0: notice: 2nd arg: $TOP is not a subdir of 1st arg: $INPUT_PATH"
    fi
fi

# if needed, create input path under TOP
#
if [[ -z "$D_FLAG" ]]; then
    # no -d processing
    #
    if [[ -z "$A_FLAG" ]]; then
	export DEST_DIR="$INPUT_PATH_ARG"
    else
	export DEST_DIR="$INPUT_PATH"
    fi
    DEST_DIR_PARENT=$("$DIRNAME" "$DEST_DIR")
    export DEST_DIR_PARENT
    export DIR="$DEST_DIR_PARENT"
    if [[ ! -e "$TOP$DIR" ]]; then
	if [[ -z "$N_FLAG" ]]; then
	    if [[ -n "$V_FLAG" ]]; then
		echo "$MKDIR" -p -v "$TOP$DIR"
		"$MKDIR" -p -v "$TOP$DIR"
		status="$?"
	    else
		"$MKDIR" -p "$TOP$DIR"
		status="$?"
	    fi
	    if [[ $status -ne 0 ]]; then
		echo "$0: ERROR: cannot make input path: $TOP$DIR" 1>&2
		exit 27
	    fi
	elif [[ -n "$V_FLAG" ]]; then
	    echo "$MKDIR" -p -v "$TOP$DIR"
	fi
    elif [[ ! -d "$TOP$DIR" ]]; then
	echo "$0: ERROR: input path exists but is not a directory: $TOP$DIR" 1>&2
	exit 28
    fi
else
    # -d processing
    #
    export DEST_DIR_PARENT=""
    export DIR=""
fi

# be sure the ownership and permissions of the input path under TOP is correct
#
# This code section is disabled by -d
#
while [[ -z "$D_FLAG" && -n "$DIR" ]]; do

    # set the owner/group if -o and needed
    #
    if [[ -n "$O_FLAG" ]]; then
	if [[ -n "$V_FLAG" ]]; then
	    echo "$0: notice: validating ownership of the input path: $DIR"
	fi
	SRC_OWNER_GROUP=$("$STAT" -f '%u:%g' "$DIR" 2>/dev/null)
	DEST_OWNER_GROUP=$("$STAT" -f '%u:%g' "$TOP$DIR" 2>/dev/null)
	if [[ $SRC_OWNER_GROUP != "$DEST_OWNER_GROUP" ]]; then
	    if [[ -z "$N_FLAG" ]]; then
		if [[ -n "$V_FLAG" ]]; then
		    echo "$CHOWN" -v "$SRC_OWNER_GROUP" "$TOP$DIR"
		    "$CHOWN" -v "$SRC_OWNER_GROUP" "$TOP$DIR"
		else
		    "$CHOWN" "$SRC_OWNER_GROUP" "$TOP$DIR"
		fi
	    elif [[ -n "$V_FLAG" ]]; then
		echo "$CHOWN" -v "$SRC_OWNER_GROUP" "$TOP$DIR"
	    else
		status=0
	    fi
	    if [[ $status -ne 0 ]]; then
		echo "$0: ERROR: $CHOWN $SRC_OWNER_GROUP $TOP$DIR error code: $status" 1>&2
		exit 29
	    fi
	elif [[ -n "$V_FLAG" ]]; then
	    echo "$0: notice: correct owner:group $SRC_OWNER_GROUP for $TOP$DIR"
	fi
    fi

    # set permission if needed
    #
    if [[ -n "$M_FLAG" ]]; then
	if [[ -n "$V_FLAG" ]]; then
	    echo "$0: notice: validating permission of the input path: $DIR"
	fi
	SRC_OWNER_MODE=$("$STAT" -f '%p' "$DIR" 2>/dev/null)
	DEST_OWNER_MODE=$("$STAT" -f '%p' "$TOP$DIR" 2>/dev/null)
	if [[ $SRC_OWNER_MODE != "$DEST_OWNER_MODE" ]]; then
	    if [[ -z "$N_FLAG" ]]; then
		if [[ -n "$V_FLAG" ]]; then
		    echo "$CHMOD" -v "$SRC_OWNER_MODE" "$TOP$DIR"
		    "$CHMOD" -v "$SRC_OWNER_MODE" "$TOP$DIR"
		else
		    "$CHMOD" "$SRC_OWNER_MODE" "$TOP$DIR"
		fi
	    elif [[ -n "$V_FLAG" ]]; then
		echo "$CHMOD" -v "$SRC_OWNER_MODE" "$TOP$DIR"
	    else
		status=0
	    fi
	    if [[ $status -ne 0 ]]; then
		echo "$0: ERROR: $CHMOD $SRC_OWNER_MODE $TOP$DIR error code: $status" 1>&2
		exit 30
	    fi
	elif [[ -n "$V_FLAG" ]]; then
	    echo "$0: notice: correct mode $SRC_OWNER_MODE for $TOP$DIR"
	fi
    fi

    # move up a directory if not /
    #
    if [[ "$DIR" != "/" ]]; then
	DIR=$("$DIRNAME" "$DIR")
    else
	break
    fi
done

# clone input path under top
#
# rsync arg review:
#
#    -a 	archive mode, same as: -rlptgoD
#	-r	    recurse into directories
#	-l	    copy symlinks as symlinks
#	-p	    preserve permissions
#	-t	    preserve times
#	-g	    preserve group
#	-o	    preserve owner (ignored if not super-user)
#	-D	    same as: --devices --specials
#			--devices	preserve device files (ignored if not super-user)
#			--specials	preserve special files
#
#    -H		preserve hard links
#
#    -S		handle sparse files efficiently
#
#    -0		all *from/filter files are delimited by NUL bytes
#
#    -i		output a change-summary for all updates
#    -h		output numbers in a human-readable format
#    -v		increase verbosity
#
#    -q		suppress non-error messages
#
#    --delete	delete extraneous files from dest dirs
#
#    -n		show what would have been transferred
#
RSYNC_ARGS="-a -H -S -0"
if [[ -n "$V_FLAG" ]]; then
    RSYNC_ARGS="$RSYNC_ARGS -i -h -v"
else
    RSYNC_ARGS="$RSYNC_ARGS -q"
fi
if [[ -z "$K_FLAG" ]]; then
    RSYNC_ARGS="$RSYNC_ARGS --delete"
fi
if [[ -n "$N_FLAG" ]]; then
    RSYNC_ARGS="$RSYNC_ARGS -n"
fi
if [[ -n "$V_FLAG" ]]; then
    echo "eval $RSYNC $RSYNC_ARGS $INPUT_PATH $TOP$DEST_DIR_PARENT"
fi
if [[ -z "$N_FLAG" ]]; then
    eval "$RSYNC" "$RSYNC_ARGS" "$INPUT_PATH" "$TOP$DEST_DIR_PARENT"
    status="$?"
else
    status=0
fi
if [[ $status -ne 0 ]]; then
    echo "$0: ERROR: $RSYNC $RSYNC_ARGS $INPUT_PATH $TOP$DEST_DIR_PARENT error code: $status" 1>&2
    exit 31
fi


# All Done!!! --  Jessica Noll, Age 2
#
exit 0
